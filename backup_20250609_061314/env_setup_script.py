#!/usr/bin/env python3
"""
CineFluent Environment Setup Script
Helps you configure environment variables for Railway deployment
"""

import os
import sys
from urllib.parse import urlparse

def print_header():
    """Print script header"""
    print("ÔøΩÔøΩ CineFluent Environment Setup Script")
    print("=" * 60)
    print("This script will help you set up environment variables")
    print("for Railway deployment with Supabase integration.")
    print("")

def validate_supabase_url(url):
    """Validate Supabase URL format"""
    if not url:
        return False, "URL cannot be empty"
    
    if not url.startswith('https://'):
        return False, "URL must start with https://"
    
    if '.supabase.co' not in url:
        return False, "URL must be a valid Supabase URL (*.supabase.co)"
    
    return True, "Valid"

def validate_key(key, key_type):
    """Validate API keys"""
    if not key:
        return False, f"{key_type} cannot be empty"
    
    if len(key) < 20:
        return False, f"{key_type} seems too short (expected 100+ characters)"
    
    if key_type == "JWT Secret" and len(key) < 40:
        return False, "JWT Secret seems too short (expected 40+ characters)"
    
    return True, "Valid"

def get_input_with_validation(prompt, validator=None):
    """Get user input with optional validation"""
    while True:
        value = input(prompt).strip()
        
        if validator:
            is_valid, message = validator(value)
            if not is_valid:
                print(f"‚ùå Error: {message}")
                continue
        
        return value

def collect_supabase_credentials():
    """Collect and validate Supabase credentials"""
    print("üìä Supabase Configuration")
    print("-" * 30)
    print("You can find these values in your Supabase Dashboard:")
    print("Go to: Project Settings > API")
    print("")
    
    # Supabase URL
    supabase_url = get_input_with_validation(
        "üåê Supabase URL (https://your-project.supabase.co): ",
        validate_supabase_url
    )
    
    # Extract project reference for database URL
    parsed_url = urlparse(supabase_url)
    project_ref = parsed_url.hostname.split('.')[0]
    
    # Anon Key
    anon_key = get_input_with_validation(
        "üîë Anon Key (public): ",
        lambda x: validate_key(x, "Anon Key")
    )
    
    # Service Role Key
    service_key = get_input_with_validation(
        "üîê Service Role Key (secret): ",
        lambda x: validate_key(x, "Service Role Key")
    )
    
    # JWT Secret
    jwt_secret = get_input_with_validation(
        "üîí JWT Secret: ",
        lambda x: validate_key(x, "JWT Secret")
    )
    
    # Database Password
    print("\nüíæ Database Configuration")
    print("-" * 30)
    print("You can find this in: Project Settings > Database")
    db_password = get_input_with_validation(
        "üîë Database Password: ",
        lambda x: (len(x) > 0, "Password cannot be empty")
    )
    
    # Build database URL
    database_url = f"postgresql://postgres:{db_password}@db.{project_ref}.supabase.co:5432/postgres"
    
    return {
        "SUPABASE_URL": supabase_url,
        "SUPABASE_ANON_KEY": anon_key,
        "SUPABASE_SERVICE_KEY": service_key,
        "SUPABASE_JWT_SECRET": jwt_secret,
        "DATABASE_URL": database_url,
        "ENVIRONMENT": "production"
    }

def generate_env_file(env_vars):
    """Generate .env file for local development"""
    env_content = "# CineFluent API Environment Variables\n"
    env_content += "# Generated by setup script\n\n"
    
    for key, value in env_vars.items():
        env_content += f"{key}={value}\n"
    
    return env_content

def generate_railway_commands(env_vars):
    """Generate Railway CLI commands"""
    commands = []
    commands.append("#!/bin/bash")
    commands.append("# Railway Environment Variable Setup Commands")
    commands.append("# Run these commands in your terminal:\n")
    
    for key, value in env_vars.items():
        # Escape special characters for shell
        escaped_value = value.replace('"', '\\"')
        commands.append(f'railway variables set {key}="{escaped_value}"')
    
    return "\n".join(commands)

def print_summary(env_vars):
    """Print configuration summary"""
    print("\n" + "=" * 60)
    print("‚úÖ Configuration Complete!")
    print("=" * 60)
    
    print("\nüìã Summary:")
    for key in env_vars:
        if "KEY" in key or "SECRET" in key or "PASSWORD" in key:
            masked_value = env_vars[key][:8] + "..." + env_vars[key][-8:]
            print(f"   {key}: {masked_value}")
        else:
            print(f"   {key}: {env_vars[key]}")

def save_files(env_vars):
    """Save configuration files"""
    print("\nüíæ Saving Configuration Files...")
    
    # Save .env file
    env_content = generate_env_file(env_vars)
    with open('.env', 'w') as f:
        f.write(env_content)
    print("   ‚úÖ Saved: .env (for local development)")
    
    # Save Railway commands
    railway_commands = generate_railway_commands(env_vars)
    with open('scripts/railway_setup.sh', 'w') as f:
        f.write(railway_commands)
    
    # Make executable
    os.chmod('scripts/railway_setup.sh', 0o755)
    print("   ‚úÖ Saved: scripts/railway_setup.sh (Railway deployment commands)")
    
    print("\nüöÄ Next Steps:")
    print("1. For LOCAL development:")
    print("   python main.py")
    print("")
    print("2. For RAILWAY deployment:")
    print("   chmod +x scripts/railway_setup.sh")
    print("   ./scripts/railway_setup.sh")
    print("   railway up")
    print("")
    print("3. Test your deployment:")
    print("   python scripts/deployment_test.py")

def test_local_connection(env_vars):
    """Test local connection with provided credentials"""
    print("\nüß™ Testing Connection...")
    
    # Set environment variables temporarily
    for key, value in env_vars.items():
        os.environ[key] = value
    
    try:
        # Try to import and test database connection
        from database import test_connection
        
        if test_connection():
            print("   ‚úÖ Database connection successful!")
            return True
        else:
            print("   ‚ùå Database connection failed")
            return False
            
    except ImportError:
        print("   ‚ö†Ô∏è  Cannot test connection (database.py not found)")
        return None
    except Exception as e:
        print(f"   ‚ùå Connection test error: {str(e)}")
        return False

def main():
    """Main setup workflow"""
    print_header()
    
    try:
        # Collect credentials
        env_vars = collect_supabase_credentials()
        
        # Print summary
        print_summary(env_vars)
        
        # Test connection
        connection_ok = test_local_connection(env_vars)
        
        # Confirm before saving
        print("\n‚ùì Save these configuration files?")
        confirm = input("   Type 'yes' to continue: ").lower().strip()
        
        if confirm in ['yes', 'y']:
            save_files(env_vars)
            
            if connection_ok:
                print("\nüéâ Setup Complete! Your backend is ready to deploy.")
            else:
                print("\n‚ö†Ô∏è  Setup complete, but connection test failed.")
                print("   Please verify your Supabase credentials.")
        else:
            print("\n‚ùå Setup cancelled.")
            return 1
        
        return 0
        
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  Setup interrupted by user")
        return 1
    except Exception as e:
        print(f"\nüí• Setup failed: {str(e)}")
        return 1

if __name__ == "__main__":
    exit(main())
